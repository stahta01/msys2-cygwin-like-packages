From 5ee25363627a01704e38cc828e745065982cb3a3 Mon Sep 17 00:00:00 2001
From: Christoph Reiter <reiter.christoph@gmail.com>
Date: Wed, 28 Jul 2021 21:47:18 +0200
Subject: mingw printf

Edited by Tim S.

---
 gold/configure     | 2 +-
 gold/configure.ac  | 2 +-
 include/ansidecl.h | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/gold/configure b/gold/configure
index 5c6fe2a5607..b17743ac674 100755
--- a/gold/configure
+++ b/gold/configure
@@ -10736,7 +10736,7 @@ else
 /* end confdefs.h.  */
 
 template<typename T> extern void foo(const char*, ...)
-  __attribute__ ((__format__ (__printf__, 1, 2)));
+  __attribute__ ((__format__ (gnu_printf, 1, 2)));
 template<typename T> void foo(const char* format, ...) {}
 void bar() { foo<int>("%s\n", "foo"); }
 
diff --git a/gold/configure.ac b/gold/configure.ac
index cafd3503b3b..4219c65bce9 100644
--- a/gold/configure.ac
+++ b/gold/configure.ac
@@ -707,7 +707,7 @@ AC_CACHE_CHECK([whether we can use attributes with template functions],
 [gold_cv_template_attribute],
 [AC_COMPILE_IFELSE([AC_LANG_SOURCE([
 template<typename T> extern void foo(const char*, ...)
-  __attribute__ ((__format__ (__printf__, 1, 2)));
+  __attribute__ ((__format__ (gnu_printf, 1, 2)));
 template<typename T> void foo(const char* format, ...) {}
 void bar() { foo<int>("%s\n", "foo"); }
 ])], [gold_cv_template_attribute=yes], [gold_cv_template_attribute=no])])
diff --git a/include/ansidecl.h b/include/ansidecl.h
index d94145d1313..cdf80495b0a 100644
--- a/include/ansidecl.h
+++ b/include/ansidecl.h
@@ -154,7 +154,7 @@ So instead we use the macro below and test it against specific values.  */
    before GCC 3.3, but as of 3.3 we need to add the `nonnull'
    attribute to retain this behavior.  */
 #ifndef ATTRIBUTE_PRINTF
-#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n))) ATTRIBUTE_NONNULL(m)
+#define ATTRIBUTE_PRINTF(m, n) __attribute__ ((__format__ (gnu_printf, m, n))) ATTRIBUTE_NONNULL(m)
 #define ATTRIBUTE_PRINTF_1 ATTRIBUTE_PRINTF(1, 2)
 #define ATTRIBUTE_PRINTF_2 ATTRIBUTE_PRINTF(2, 3)
 #define ATTRIBUTE_PRINTF_3 ATTRIBUTE_PRINTF(3, 4)
@@ -182,7 +182,7 @@ So instead we use the macro below and test it against specific values.  */
    NULL format specifier was allowed as of gcc 3.3.  */
 #ifndef ATTRIBUTE_NULL_PRINTF
 # if (GCC_VERSION >= 3003)
-#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (__printf__, m, n)))
+#  define ATTRIBUTE_NULL_PRINTF(m, n) __attribute__ ((__format__ (gnu_printf, m, n)))
 # else
 #  define ATTRIBUTE_NULL_PRINTF(m, n)
 # endif /* GNUC >= 3.3 */
-- 
